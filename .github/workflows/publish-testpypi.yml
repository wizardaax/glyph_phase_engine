name: Publish to TestPyPI (Trusted Publishing)

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/publish-testpypi.yml'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  id-token: write  # Required for Trusted Publishing
  attestations: write  # Required for SLSA attestations

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        
    - name: Generate development version
      run: |
        # For TestPyPI, append commit hash to version for uniqueness
        COMMIT_HASH=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        
        # Read current version and append dev suffix
        python -c "
        import re
        import sys
        
        with open('pyproject.toml', 'r') as f:
            content = f.read()
            
        # Update version with dev suffix
        pattern = r'version = \"([^\"]+)\"'
        current_version = re.search(pattern, content).group(1)
        dev_version = f'{current_version}.dev{TIMESTAMP}+{COMMIT_HASH}'
        
        updated_content = re.sub(pattern, f'version = \"{dev_version}\"', content)
        
        with open('pyproject.toml', 'w') as f:
            f.write(updated_content)
            
        print(f'Updated version to: {dev_version}')
        "
        
    - name: Build packages
      run: python -m build
      
    - name: Verify build artifacts
      run: |
        ls -la dist/
        # Check that we have both wheel and source distribution
        if [[ ! -f dist/*.whl ]]; then
          echo "‚ùå No wheel file found"
          exit 1
        fi
        if [[ ! -f dist/*.tar.gz ]]; then
          echo "‚ùå No source distribution found"
          exit 1
        fi
        echo "‚úÖ Build artifacts verified"
        
    - name: Run twine check
      run: twine check dist/*
      
    - name: Sanity checks
      run: |
        # Check for common issues
        echo "üîç Running sanity checks..."
        
        # Check package size (warn if > 50MB)
        TOTAL_SIZE=$(du -sb dist/ | cut -f1)
        if [[ $TOTAL_SIZE -gt 52428800 ]]; then
          echo "‚ö†Ô∏è  Warning: Package size is large ($(($TOTAL_SIZE / 1024 / 1024))MB)"
        fi
        
        # Check for forbidden files
        if find dist/ -name "*.pyc" -o -name "*.pyo" -o -name ".DS_Store" -o -name "__pycache__" | grep -q .; then
          echo "‚ùå Found forbidden files in distribution"
          find dist/ -name "*.pyc" -o -name "*.pyo" -o -name ".DS_Store" -o -name "__pycache__"
          exit 1
        fi
        
        echo "‚úÖ Sanity checks passed"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: testpypi-dist-packages
        path: dist/
        retention-days: 7

  publish-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/glyph-phase-engine
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: testpypi-dist-packages
        path: dist/
        
    - name: Verify artifacts before publishing
      run: |
        ls -la dist/
        python -m pip install twine
        twine check dist/*
        
    - name: Generate SLSA attestations
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'
        
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        print-hash: true
        
    - name: Smoke test installation
      run: |
        # Wait a moment for TestPyPI to propagate
        sleep 60
        
        # Get the version we just published
        PUBLISHED_VERSION=$(python -c "
        import os
        import re
        files = [f for f in os.listdir('dist/') if f.endswith('.whl')]
        if files:
            match = re.search(r'glyph_phase_engine-([^-]+)', files[0])
            if match:
                print(match.group(1))
        ")
        
        echo "Attempting to install version: $PUBLISHED_VERSION"
        
        # Install from TestPyPI with retries
        for i in {1..3}; do
          if python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "glyph-phase-engine==$PUBLISHED_VERSION"; then
            echo "‚úÖ Installation successful on attempt $i"
            break
          else
            echo "‚ö†Ô∏è  Installation attempt $i failed, retrying..."
            sleep 30
          fi
        done
        
        # Test basic import and functionality
        python -c "
        import glyph_phase_engine
        from glyph_phase_engine import GlyphPhaseEngine, PhaseState
        
        # Basic smoke test
        engine = GlyphPhaseEngine()
        result = engine.process_symbolic_input('test')
        print(f'‚úÖ Smoke test passed: {result}')
        print(f'Package version: {glyph_phase_engine.__version__}')
        "

  dry-run:
    name: Dry run (validation only)
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: testpypi-dist-packages
        path: dist/
        
    - name: Simulate publishing checks
      run: |
        echo "üîç Dry run mode - simulating TestPyPI publishing checks"
        ls -la dist/
        python -m pip install twine
        twine check dist/*
        echo "‚úÖ All checks would pass for TestPyPI publishing"