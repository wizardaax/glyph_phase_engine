name: Publish to PyPI (Trusted Publishing)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (skip actual publishing)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  id-token: write  # Required for Trusted Publishing
  attestations: write  # Required for SLSA attestations

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        
    - name: Verify version consistency
      run: |
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])" 2>/dev/null || python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "Project version: $PROJECT_VERSION"
        
        # Check if this is a tag-triggered release
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          TAG_VERSION=${TAG_VERSION#v}
          echo "Tag version: $TAG_VERSION"
          
          if [[ "$PROJECT_VERSION" != "$TAG_VERSION" ]]; then
            echo "‚ùå Version mismatch: pyproject.toml ($PROJECT_VERSION) != tag ($TAG_VERSION)"
            exit 1
          fi
          echo "‚úÖ Version consistency check passed"
        fi
        
    - name: Build packages
      run: python -m build
      
    - name: Verify build artifacts
      run: |
        ls -la dist/
        # Check that we have both wheel and source distribution
        if [[ ! -f dist/*.whl ]]; then
          echo "‚ùå No wheel file found"
          exit 1
        fi
        if [[ ! -f dist/*.tar.gz ]]; then
          echo "‚ùå No source distribution found"
          exit 1
        fi
        echo "‚úÖ Build artifacts verified"
        
    - name: Run twine check
      run: twine check dist/*
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  publish:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'false')
    environment:
      name: pypi
      url: https://pypi.org/p/glyph-phase-engine
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Verify artifacts before publishing
      run: |
        ls -la dist/
        python -m pip install twine
        twine check dist/*
        
    - name: Generate SLSA attestations
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: 'dist/*'
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        
    - name: Smoke test installation
      run: |
        # Wait a moment for PyPI to propagate
        sleep 30
        
        # Install the package from PyPI
        python -m pip install glyph-phase-engine
        
        # Test basic import and functionality
        python -c "
        import glyph_phase_engine
        from glyph_phase_engine import GlyphPhaseEngine, PhaseState
        
        # Basic smoke test
        engine = GlyphPhaseEngine()
        result = engine.process_symbolic_input('test')
        print(f'‚úÖ Smoke test passed: {result}')
        print(f'Package version: {glyph_phase_engine.__version__}')
        "

  dry-run:
    name: Dry run (TestPyPI simulation)
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Simulate publishing checks
      run: |
        echo "üîç Dry run mode - simulating publishing checks"
        ls -la dist/
        python -m pip install twine
        twine check dist/*
        echo "‚úÖ All checks would pass for PyPI publishing"